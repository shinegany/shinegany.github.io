<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Maven基础</title>
    <link href="/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h1><h2 id="一、Maven简介"><a href="#一、Maven简介" class="headerlink" title="一、Maven简介"></a>一、Maven简介</h2><h3 id="maven是什么"><a href="#maven是什么" class="headerlink" title="maven是什么"></a>maven是什么</h3><ul><li>Maven本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型（POM）</li><li>POM：项目对象模型</li></ul><img src="/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/image-20220601210957232.png" class title="image-20220601214627492"><h3 id="Maven作用"><a href="#Maven作用" class="headerlink" title="Maven作用"></a>Maven作用</h3><ul><li>项目构建：提供标准的、跨平台的自动化项目构建方式</li><li>依赖管理：方便快捷的管理项目依赖的资源（jar包），避免资源见版本冲突</li><li>统一开发结构：提供标准的、统一的项目结构</li></ul><h3 id="Maven基础概念"><a href="#Maven基础概念" class="headerlink" title="Maven基础概念"></a>Maven基础概念</h3><p>（一）仓库：用于存储资源，包含各种jar包</p><img src="/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/image-20220601210919279.png" class title="image-20220601210919279"><ul><li>私服的作用：<ul><li>加快开发效率</li><li>保存具有版权的资源</li><li>一定范围内共享资源，仅对内部开放，不对外共享</li></ul></li></ul><p>（二）坐标<br>（1）坐标</p><ul><li>Maven中的坐标用于描述仓库中资源的位置</li><li><a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li></ul><p>（2）坐标的组成</p><ul><li><p>groupId：定义当前Maven项目隶属组织名称(通常是域名反写，例如: org.mybatis)</p></li><li><p>artifactId：定义当前Maven项目名称(通常是模块名称，例如CRM、SMS)</p></li><li><p>version：定义当前项目版本号</p></li></ul><p>（3）作用</p><p>​使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成</p><h2 id="二、Maven项目"><a href="#二、Maven项目" class="headerlink" title="二、Maven项目"></a>二、Maven项目</h2><p>（一）Maven的目录结构</p><img src="/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/image-20220601211046239.png" class title="image-20220601211046239"><ul><li>在src同层目录下创建pom.xml文件<br>pom.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmIns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>com.shine<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>project-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactld</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactld</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>（二）Maven项目构建命令（cmd）</p><p>（1）Maven构建命令使用mvn开头，后面添加功能参数，可以一次执行多个命令，使用空格分隔</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mvn compile #编译<br>mvn clean   #清理<br>mvn test    #测试<br>mvn package #打包<br>mvn install #安装到本地仓库<br></code></pre></td></tr></table></figure><p>（2）插件创建工程</p><ul><li>创建工程</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mvn archetype:generate<br>    -DgroupId=&#123;project-packaging&#125;<br>    -DartifactId=&#123;project-name &#125;<br>    -DarchetypeArtifactId=maven-archetype-quickstart<br>    -DinteractiveMode=false<br></code></pre></td></tr></table></figure><ul><li>创建Java工程</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mvn archetype:generate -DgroupId=com.itheima -DartifactId=java-project -DarchetypeArtifactId=maven-archetype-quickstart -Dversion=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-snapshot -DinteractiveMode=false<br></code></pre></td></tr></table></figure><ul><li>创建web工程</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mvn archetype:generate -DgroupId=com.itheima -DartifactId=web-project -DarchetypeArtifactId=maven-archetype-webapp -Dversion=<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> -snapshotDinteractiveMode=false<br></code></pre></td></tr></table></figure><p>（三）插件</p><ul><li>Tomcat7运行插件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupid</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>（四）webapp的pom.xml案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--指定pom的模型版本--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--打包方式，web工程为war，java工程为jar--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>webapp01<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>webapp01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--  版本号：realease完成版，snapshot开发版--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--设置当前工程的所有依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!--构建--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置插件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、依赖管理"><a href="#三、依赖管理" class="headerlink" title="三、依赖管理"></a>三、依赖管理</h2><p>（一）依赖管理<br>（1）依赖<br>    &gt; 指当前项目运行所需的jar，一个项目可以设置多个依赖<br><code>&lt;dependencies&gt;&lt;dependencey&gt;&lt;/dependencey&gt;&lt;/dependencies&gt;</code></p><p>（2）依赖传递</p><ul><li>直接依赖：在当前项目中通过依赖配置建立依赖关系</li><li>间接依赖：被资源的资源如果依赖其他资源。当前项目间接依赖其他资源</li></ul><img src="/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/image-20220601211334701.png" class title="image-20220601211334701"><p>（3）依赖传递冲突问题（依赖中出现了相同的资源）</p><ul><li>路径优先:当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>声明优先:当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</li><li>特殊优先:当同级配置了相同资源的不同版本，后配置的覆盖先配置的</li></ul><img src="/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/image-20220601211456631.png" class title="image-20220601211456631"><p>（4）可选依赖</p><blockquote><p>可选依赖指对外隐藏当前所依赖的资源——不透明</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true&lt;/ optional&gt;<br>&lt;/ dependeney&gt;<br></code></pre></td></tr></table></figure><p>（二）依赖范围<br>（1）依赖范围</p><ul><li>依赖的jar默认情况可以在任何地方使用，可以通过scope标签设定其作用范围</li><li>作用范围<ul><li>主程序范围有效</li><li>测试程序有效</li><li>是否参与打包</li></ul></li></ul><img src="/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/image-20220601211536358.png" class title="image-20220601211536358"><p>（2）依赖范围传递性（了解即可)</p><ul><li>带有依赖范围的资源在进行传递时，作用范围将受到影响</li></ul><img src="/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/image-20220601211552337.png" class title="image-20220601211552337"><h2 id="四、生命周期与插件"><a href="#四、生命周期与插件" class="headerlink" title="四、生命周期与插件"></a>四、生命周期与插件</h2><p>（1）项目构建生命周期</p><p>​Maven构建生命周期描述的是一次构建过程经历了多少个事件</p><img src="/2023/10/29/java/Maven%E5%9F%BA%E7%A1%80/image-20220601211759599.png" class title="image-20220601211759599"><p>（2）插件</p><ul><li>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</li><li>默认maven在各个生命周期上绑定有预设的功能</li><li>通过插件可以自定义其他功能</li></ul><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven高级</title>
    <link href="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/"/>
    <url>/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h1><h2 id="一、分模块开发与设计"><a href="#一、分模块开发与设计" class="headerlink" title="一、分模块开发与设计"></a>一、分模块开发与设计</h2><ol><li>工程模块与模块划分</li></ol><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220602153708805.png" class title="image-20220602153708805"><ol start="2"><li>分模块开发</li></ol><ul><li>模块中仅包含当前模块对应的功能类与配置文件</li><li>spring核心配置根据模块功能不同进行独立制作</li><li>当前模块所依赖的模块通过导入坐标的形式加入当前模块后才可以使用</li><li>web.xml需要加载所有spring核心配置文件</li></ul><h2 id="二、聚合"><a href="#二、聚合" class="headerlink" title="二、聚合"></a>二、聚合</h2><ol><li><p>多模块构建维护（实际工程开发中有些模块可能进行更新）</p></li><li><p>聚合的作用：通过建立一个聚合模块，该模块管理所有的工程模块，方便一次重新编译、更新</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--ssm工程文件中的pom.xml--&gt;</span><br>......<br><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--定义该工程用于进行构建管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--管理的工程列表--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--具体的工程名称--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../ssm_pojo<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../ssm_dao<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../ssm_service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../ssm_controller<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>模块的类型</li></ol><ul><li>pom、war、jar</li></ul><h2 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h2><ol><li>模块依赖关系维护</li></ol><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220602163239035.png" class title="image-20220602163239035"><ol start="2"><li>继承</li></ol><p>（1）作用：通过继承实现在子工程中沿用父工程中的配置</p><p>（2）父工程pom.xml(ssm)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--声明此处进行依赖管理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）子工程pom.xml(ssm_pojo)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义该工程的父工程--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ssm&lt;/ artifactId&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!--填写父工程的pom文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../ssm/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）聚合和继承小结</p><ul><li>作用：<ul><li>聚合用于快速构建项目</li><li>继承用于快速配置</li></ul></li><li>相同点：<ul><li>聚合与继承的pom.xml文件打包方式均为pom，可以将两种关系制作到同一个pom文件中</li><li>聚合与继承均属于设计型模块，并无实际的模块内容</li></ul></li><li>不同点:<ul><li>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li><li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li></ul></li></ul><h2 id="四、属性"><a href="#四、属性" class="headerlink" title="四、属性"></a>四、属性</h2><p>（1）属性类别：自定义属性</p><ul><li><p>作用：等同于定义变量，方便统一维护</p></li><li><p>定义格式:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义自定义属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调用格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependeney</span>&gt;</span><br><br>（2）属性类别：内置属性<br><br>- 作用：使用maven内置属性，快速配置<br><br>- 调用格式：<br><br>  ```xml<br>  $&#123;basedir&#125;<br>  $&#123;version&#125;<br></code></pre></td></tr></table></figure></li></ul><p>（3）属性类别：Setting属性</p><ul><li>作用：使用Maven配置文件settings.xml中的标签属性，用于动态配置</li><li>调用格式：<br><code>$&#123;settings.localRepository&#125;</code></li></ul><p>（4）系统属性</p><p>（5）环境变量属性</p><h2 id="五、版本管理"><a href="#五、版本管理" class="headerlink" title="五、版本管理"></a>五、版本管理</h2><p>（1）工程版本</p><ul><li>SNAPSHOT(快照版本)<ul><li>项目开发过程中，为方便团队成员合作，解决模块间相互依赖和时时更新的问题，开发者对每个模块进行构建的时候，输出的临时性版本叫快照版本（测试阶段版本)</li><li>快照版本会随着开发的进展不断更新</li></ul></li><li>RELEASE(发布版本)<ul><li>项目开发到进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本</li></ul></li></ul><p>（2）工程版本号约定</p><ul><li>约定规范：<ul><li>&lt;主版本&gt;.&lt;次版本&gt;.&lt;增量版本&gt;.&lt;里程碑版本&gt;</li><li>主版本：表示项目重大架构的变更，如: spring5相较于spring4的迭代</li><li>次版本：表示有较大的功能增加和变化，或者全面系统地修复漏洞</li><li>增量版本：表示有重大漏洞的修复</li><li>里程碑版本：表明一个版本的里程碑（版本内部)。这样的版本同下一个正式版本相比，相对来说不是很稳定，有待更多的测试</li></ul></li><li>范例:<ul><li>5.1.9.RELEASE</li></ul></li></ul><h2 id="六、资源配置"><a href="#六、资源配置" class="headerlink" title="六、资源配置"></a>六、资源配置</h2><p>资源多文件配置</p><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220605083301264.png" class title="image-20220605083301264"><p>配置文件引用pom属性</p><ul><li>作用<ul><li>在任意配置文件中加载pom文件中定义的属性</li></ul></li><li>调用格式<ul><li><code>$&#123;jdbc.url&#125;</code></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;!-―定义自定义属性--&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/ssm_db<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.ur1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-comment">&lt;!--配置资源文件对应的信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--设定配置文件对应的位置目录，支持使用属性动态设定路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--开启对配置文件的资源加载过滤--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、多环境开发配置"><a href="#七、多环境开发配置" class="headerlink" title="七、多环境开发配置"></a>七、多环境开发配置</h2><p>（1）多环境兼容</p><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220605084808886.png" class title="image-20220605084808886"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--创建多环境--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--定义具体的环境:生产环境--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--定义环境对应的唯一名称--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>pro_env<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--定义环境中换用的属性值--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--设置默认启动--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--定义具体的环境:开发环境--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>dep_env<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）加载指定环境</p><ul><li>作用<ul><li>加载指定环境配置</li><li>调用格式<br><code>mvn 指令 -P 环境定义id</code></li><li>范例<br><code>mvn install -P pro env</code></li></ul></li></ul><h2 id="八、私服"><a href="#八、私服" class="headerlink" title="八、私服"></a>八、私服</h2><p>（一）nexus服务器安装与启动</p><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220605092403870.png" class title="image-20220605092403870"><p>（1）Nexus安装、启动与配置</p><ul><li><p>Nexus是Sonatype公司的一款maven私服产品</p></li><li><p>下载地址: <a href="https://help.sonatype.com/repomanager3/download">https://help.sonatype.com/repomanager3/download</a></p></li><li><p>启动服务器(命令行启动)<br><code>nexus-exe /run nexus</code></p></li><li><p>访问服务器(默认端口:8081)<br><code>http://localhost:8081</code></p></li></ul><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220605101824399.png" class title="image-20220605101824399"><ul><li>修改基础配置信息<ul><li>安装路径下etc目录中nexus-default.properties文件保存有nexus基础配置信息，例如默认访问端口</li></ul></li><li>修改服务器运行配置信息<ul><li>安装路径下bin目录中nexus.vmoptions文件保存有nexus服务器启动对应的配置信息，例如默认占用内存空间</li></ul></li></ul><p>（2）私服资源获取</p><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220605094229734.png" class title="image-20220605094229734"><p>（二）仓库分类与手动上传组件</p><p>（1）仓库分类</p><ul><li><p>宿主仓库hosted</p><ul><li>保存无法从中央仓库获取的资源<ul><li>自主研发</li><li>第三方非开源项目</li></ul></li></ul><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220605102443823.png" class title="image-20220605102443823"></li><li><p>代理仓库proxy</p><ul><li>代理远程仓库，通过nexus访问其他公共仓库，例如中央仓库</li></ul></li><li><p>仓库组group</p><ul><li>将若干个仓库组成一个群组，简化配置</li><li>仓库组不能保存资源，属于设计型仓库</li></ul><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220605102622754.png" class title="image-20220605102622754"></li></ul><p>（2）资源上传</p><ul><li><p>上传资源时提供对应的信息</p><ul><li>保存的位置（宿主仓库）</li><li>资源文件</li><li>对应坐标</li></ul><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220605102753319.png" class title="image-20220605102753319"></li></ul><p>（三）本地仓库访问私服</p><ul><li>IDEA环境中资源上传与下载</li></ul><img src="/2023/10/29/java/Maven%E9%AB%98%E7%BA%A7/image-20220605103350745.png" class title="image-20220605103350745"><ul><li>配置本地仓库访问私服的权限（maven库的settings.xml）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置访问服务器的权限，用户名密码--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>shine-maven-release<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置本地仓库资源来源（maven库的settings.xml）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自定义私服--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-shine<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（四）IDEA访问私服与组件上传</p><ul><li>配置当前项目访问私服上传资源的保存位置（pom.xml）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--发布配置管理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>shine-maven-release<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/shine-maven-release/<span class="hljs-tag">&lt;/<span class="hljs-name">ur1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>shine-maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ur1</span>&gt;</span>http://localhost:8081/repository/shine-maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">ur1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>发布资源到私服：<code>mvn deploy</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatisPlus</title>
    <link href="/2023/10/29/java/MyBatisPlus/"/>
    <url>/2023/10/29/java/MyBatisPlus/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h1><h2 id="一、MyBatisPlus简介"><a href="#一、MyBatisPlus简介" class="headerlink" title="一、MyBatisPlus简介"></a>一、MyBatisPlus简介</h2><blockquote><p>MyBatisPlus ( 简称MP)是基于MyBatis框架基础上开发的增强型工具，旨在简化开发、提高效率。</p></blockquote><ol><li>创建入门案例</li></ol><ul><li>创建新模块，选择Spring初始化，并配置模块相关基础信息</li><li>勾选MySQL Driver</li><li>手动添加mp起步依赖（由于mp并未被收录到idea的系统内置配置,无法直接选择加入）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>设置jdbc参数（application.yml）</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot_demo</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><ul><li>定义数据接口，继承BaseMapper<User></User></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductsDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Products&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试类注入dao接口，测试功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductsDao productsDao;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Products&gt; products = productsDao.selectList(<span class="hljs-literal">null</span>);<br>        System.out.println(products);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、标准数据层开发"><a href="#二、标准数据层开发" class="headerlink" title="二、标准数据层开发"></a>二、标准数据层开发</h2><ol><li>标准数据层CRUD功能</li></ol><img src="/2023/10/29/java/MyBatisPlus/image-20230419143222659.png" class title="image-20230419143222659"><ol start="2"><li>lombok</li></ol><blockquote><p>一个Java类库，提供了一组注解，简化POJO实体类开发；常用注解@Data</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.project1ombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>1ombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>分页查询</li></ol><ul><li>设置分页拦截器作为Spring管理的bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shine.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MpConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.定义Mp拦截器</span><br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">mpInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-comment">//2.添加具体拦截器</span><br>        mpInterceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>());<br>        <span class="hljs-keyword">return</span> mpInterceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行分页查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">IPage</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-number">1</span> ,<span class="hljs-number">2</span>);<br>    productsDao.selectPage(page, <span class="hljs-literal">null</span>);<br>    System.out.println(<span class="hljs-string">&quot;当前页码值&quot;</span>+ page.getCurrent());<br>    System.out.println(<span class="hljs-string">&quot;每页显示数&quot;</span>+ page.getSize());<br>    System.out.println(<span class="hljs-string">&quot;一共多少页&quot;</span>+ page.getPages());<br>    System.out.println(<span class="hljs-string">&quot;一共多少条数据&quot;</span>+ page.getTotal());<br>    System.out.println(<span class="hljs-string">&quot;数据&quot;</span>+ page.getRecords());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>开启日志（查看sql语句，主要作调试时用）</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h2 id="三、DQL编程控制"><a href="#三、DQL编程控制" class="headerlink" title="三、DQL编程控制"></a>三、DQL编程控制</h2><ol><li>条件查询</li></ol><blockquote><p>MyBatisPlus将书写复杂的SQL查询条件进行了封装，使用编程的形式完成查询条件的组合</p></blockquote><ul><li>常规格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1：按条件查询</span><br><span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">qw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>qw.lt(<span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-number">1000</span>);<br>List&lt;Products&gt; products = productsDao.selectList(qw);<br>System.out.println(products);<br></code></pre></td></tr></table></figure><ul><li>lambda格式（推荐）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式2：lambda格式按条件查询</span><br>QueryWrapper&lt;Products&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Products&gt;();<br>qw.lambda().gt(Products::getPrice, <span class="hljs-number">1000</span>);<br>List&lt;Products&gt; products = productsDao.selectList(qw);<br>System.out.println(products);<br><br><span class="hljs-comment">//方式3：lambda格式按条件查询</span><br>LambdaQueryWrapper&lt;Products&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;Products&gt;();<br>lqw.eq(Products::getCategory_id, <span class="hljs-string">&quot;c001&quot;</span>);<br>List&lt;Products&gt; products = productsDao.selectList(lqw);<br>System.out.println(products);<br></code></pre></td></tr></table></figure><ol start="2"><li>查询投影</li></ol><ul><li>查询结果包含模型类中部分属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">LambdaQueryWrapper&lt;Products&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;Products&gt;();<br>lqw.select(Products::getPname, Products::getPrice, Products::getCategory_id);<br>List&lt;Products&gt; products = productsDao.selectList(lqw);<br>System.out.println(products);<br></code></pre></td></tr></table></figure><ul><li>查询结果包含模型类中未定义的属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">qw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>qw.select(<span class="hljs-string">&quot;count(*) as count&quot;</span>);<br>qw.groupBy(<span class="hljs-string">&quot;category_id&quot;</span>);<br>List&lt;Map&lt;String, Object&gt;&gt; products = productsDao.selectMaps(qw);<br>System.out.println(products);<br></code></pre></td></tr></table></figure><ol start="3"><li>字段映射和表名映射</li></ol><ul><li><p>问题1：表字段和编码属性设计不同步</p></li><li><p>问题2：编码中添加了数据库中未定义的属性</p></li><li><p>问题3：采用默认查询开放了更多的字段查看权限</p></li><li><p>问题4：表名与编码开发设计不同步</p></li></ul><img src="/2023/10/29/java/MyBatisPlus/image-20230419163124011.png" class title="image-20230419163124011"><h2 id="四、DML编程控制"><a href="#四、DML编程控制" class="headerlink" title="四、DML编程控制"></a>四、DML编程控制</h2><ol><li>id生成策略控制</li></ol><ul><li><p>不同的表 应用不同的id生成策略</p><ul><li>日志：自增（1,2,3,4, …）</li><li>购物订单：特殊规则 (FQ23948AK3843)</li><li>外卖单：关联地区日期等信息(10 04 20200314 34 91)</li><li>关系表：可省略id</li><li>……</li></ul></li><li><p>生成策略</p><ul><li>AUTO(0)：使用数据库id自增策略控制id生成</li><li>NONE(1)：不设置id生成策略</li><li>INPUT(2)：用户手工输入id</li><li>ASSIGN_ ID(3)：雪花算法生成id (可兼容数值型与字符串型)</li><li>ASSIGN_ UUID(4)：以UUID生成算法作为id生成策略</li></ul><p><code>@TableId(type = IdType.ASSIGN_ID)</code></p></li><li><p>全局配置</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tbl_</span><br></code></pre></td></tr></table></figure><ol start="2"><li>逻辑删除</li></ol><blockquote><p>删除操作业务问题：业务数据从数据库中丢弃<br>逻辑删除：为数据设置是否可用状态字段，删除时设置状态字段为不可用状态，数据保留在数据库中</p></blockquote><ul><li>数据库表中添加逻辑删除标记字段</li><li>实体类中添加对应字段，并设定当前字段为逻辑删除标记字段 <code>@TableLogic</code></li></ul><ol start="3"><li>乐观锁</li></ol><blockquote><p>业务并发现象带来的问题：秒杀（比如大量用户同时抢购某种商品）</p></blockquote><ul><li>数据库表中添加锁标记字段</li><li>实体类中添加对应字段，并设定当前字段为逻辑删除标记字段 <code>version</code></li><li>配置乐观锁拦截器实现锁机制对应的动态SQL语句拼装</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MpConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">mpInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        mpInterceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInnerInterceptor</span>());<br>        <span class="hljs-keyword">return</span> mpInterceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用乐观锁机制在修改前必须先获取到对应数据的verion方可正常进行（先查询一次）</li></ul><h2 id="五、快速开发"><a href="#五、快速开发" class="headerlink" title="五、快速开发"></a>五、快速开发</h2><blockquote><p>利用代码生成器</p></blockquote><ol><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--代码生成器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--velocity模板引擎--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity-engine-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>核心代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取代码生成器的对象</span><br><span class="hljs-type">AutoGenerator</span> <span class="hljs-variable">autoGenerator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoGenerator</span>();<br>......<br>autoGenerator.execute();<br></code></pre></td></tr></table></figure><ol start="3"><li>设置数据库相关配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DataSourceConfig</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceConfig</span>();<br>dataSource.setDriverName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/springboot_demo&quot;</span>);<br>dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>autoGenerator.setDataSource(dataSource);<br></code></pre></td></tr></table></figure><ol start="4"><li><p>设置全局配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">GlobalConfig</span> <span class="hljs-variable">globalConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalConfig</span>();<br>globalConfig.setOutputDir(System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)+<span class="hljs-string">&quot;/src/main/java&quot;</span>);<br>globalConfig.setOpen(<span class="hljs-literal">false</span>);<br>globalConfig.setAuthor(<span class="hljs-string">&quot;Shine&quot;</span>);<br>globalConfig.setFileOverride(<span class="hljs-literal">true</span>);<br>globalConfig.setMapperName(<span class="hljs-string">&quot;%sDao&quot;</span>);<br>autoGenerator.setGlobalConfig(globalConfig);<br></code></pre></td></tr></table></figure></li><li><p>设置包名相关配置</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PackageConfig</span> <span class="hljs-variable">packageConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageConfig</span>();<br>packageConfig.setParent(<span class="hljs-string">&quot;com.shine&quot;</span>);<br>packageConfig.setEntity(<span class="hljs-string">&quot;domain&quot;</span>);<br>packageConfig.setMapper(<span class="hljs-string">&quot;dao&quot;</span>);<br>autoGenerator.setPackageInfo(packageConfig);<br></code></pre></td></tr></table></figure><ol start="6"><li>策略设置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StrategyConfig</span> <span class="hljs-variable">strategyConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrategyConfig</span>();<br>strategyConfig.setRestControllerStyle(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//strategyConfig.setInclude(&quot;products&quot;, &quot;book&quot;);//设置当前生成的表名，为可变参数</span><br><span class="hljs-comment">//strategyConfig.setTablePrefix(&quot;tbl_&quot;); //设置数据库表的前缀名称，模块名=数据库名-前缀名</span><br><span class="hljs-comment">//strategyConfig.setVersionFieldName(&quot;version&quot;);//设置乐观锁字段名</span><br><span class="hljs-comment">//strategyConfig.setLogicDeleteFieldName(&quot;deleted&quot;);//设置逻辑删除字段名</span><br>strategyConfig.setEntityLombokModel(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置是否启用lombok</span><br>autoGenerator.setStrategy(strategyConfig);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2023/10/29/java/SpingBoot/"/>
    <url>/2023/10/29/java/SpingBoot/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Springboot-简介"><a href="#一、Springboot-简介" class="headerlink" title="一、Springboot 简介"></a>一、Springboot 简介</h2><p>目的：设计目的是用来简化Spring应用的初始搭建以及开发过程</p><ul><li>Spring程序和SpringBoot程序对比</li></ul><img src="/2023/10/29/java/SpingBoot/image-20220630223033876.png" class title="image-20220630223033876"><ol><li>SpringBoot项目快速启动</li></ol><ul><li><p>对SpringBoot项目打包（执行Maven构建指令package)</p></li><li><p>执行启动命令（cmd中）</p><p><code>java -jar springboot.jar</code></p><p><strong>注：</strong>jar支持命令行启动需要依赖maven插件支持，请确认打包时是否具有SpringBoot对应的maven插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>快速启动有利于我们脱离开IDEA和tomcat运行一个springboot工程</p></li></ul><ol start="2"><li><p>SpringBoot起步依赖</p><ul><li>starter<ul><li>SpringBoot中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li></ul></li><li>parent<ul><li>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</li></ul></li><li>实际开发<ul><li>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供如发生坐标错误，再指定version(要小心版本冲突)</li></ul></li></ul></li><li><p>使用maven依赖管理变更起步依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--web起步依赖环境中，排除Tomcat起步依赖- -&gt;</span><br><span class="hljs-comment">&lt;exclusions&gt;</span><br><span class="hljs-comment">&lt;exclusion&gt;</span><br><span class="hljs-comment">&lt;groupId&gt;org.springframework.boot&lt;/ groupId&gt;</span><br><span class="hljs-comment">&lt;artifactId&gt;spring -boot -starter-tomcat&lt;/artifactId&gt;</span><br><span class="hljs-comment">&lt;/exclusion&gt;</span><br><span class="hljs-comment">&lt;/exclusions&gt;</span><br><span class="hljs-comment">    &lt;/dependency&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &lt;!--添加Detty起步依赖，版本SpringBoot的starter控制--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>Jetty比Tomcat更轻量级，可扩展性更强(相较于Tomcat)，谷歌应用引擎(GAE) 已经全面切换为Jetty</li></ul></li></ol><h2 id="二、基础配置"><a href="#二、基础配置" class="headerlink" title="二、基础配置"></a>二、基础配置</h2><ol><li>三种配置文件格式</li></ol><ul><li><p>application.properties</p><p><code>server.port = 80</code></p></li><li><p>application.yml（主流）</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">server:</span><br><span class="hljs-symbol">port:</span> <span class="hljs-number">81</span><br></code></pre></td></tr></table></figure></li><li><p>application.yaml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">server:</span><br><span class="hljs-symbol">port:</span> <span class="hljs-number">82</span><br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>yaml数据读取</li></ol><ul><li>使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}</li><li>封装全部数据到Environment对象</li><li>自定义对象封装指定数据（比如Mybatis配置类）</li></ul><ol start="3"><li>多环境启动</li></ol><img src="/2023/10/29/java/SpingBoot/image-20230418102359760.png" class title="image-20230418102359760"><ol start="4"><li>配置文件分类</li></ol><ul><li>SpringBoot中4级配置文件<ul><li>1级: file : config&#x2F;application. yml  -&gt;最高</li><li>2级: file : application.yml</li><li>3级: classpath: config&#x2F;application. yml</li><li>4级: classpath: application. yml -&gt;最低</li></ul></li><li>作用:<ul><li>1级与2级留做系统打包后设置通用属性</li><li>3级与4级用于系统开发阶段设置通用属性</li></ul></li></ul><h2 id="三、整合第三方技术"><a href="#三、整合第三方技术" class="headerlink" title="三、整合第三方技术"></a>三、整合第三方技术</h2><ul><li>整合JUnit</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootTests</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookservice;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testsave</span><span class="hljs-params">()</span>&#123;<br>bookservice.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>整合MyBatis</p><ul><li>设置数据源参数</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">datasource :</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.poo1.DruidDataSource</span><br><span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">ur1:</span> <span class="hljs-string">jdbc:mysq1://localhost:3306/ssm_db</span><br><span class="hljs-attr">use rname:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><ul><li>定义数据层接口与映射配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">@Mapper</span><br><span class="hljs-string">public</span> <span class="hljs-string">interface</span> <span class="hljs-string">UserDao</span> &#123;<br><span class="hljs-string">@Select(&quot;select</span> <span class="hljs-string">*</span> <span class="hljs-string">from</span> <span class="hljs-string">user&quot;)</span><br>    <span class="hljs-string">pub1ic</span> <span class="hljs-string">List&lt;User&gt;</span> <span class="hljs-string">getA11();</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpingMVC</title>
    <link href="/2023/10/29/java/SpingMVC/"/>
    <url>/2023/10/29/java/SpingMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpingMVC"><a href="#SpingMVC" class="headerlink" title="SpingMVC"></a>SpingMVC</h1><ul><li><p>SpringMVC 技术与Servlet技术功能等同，均属于web层开发技术</p></li><li><p>SpringMVC是一种基于Java实现MVC模型的轻量级web框架</p></li><li><p>优点：使用简单，开发便捷（相比于Servlet），灵活性强</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">\\Servlet<br><span class="hljs-meta">@WebServlet( &quot;/user/save&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserSaveServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req,HttpservIeLkespunse resp)</span> <span class="hljs-keyword">throws</span> ServletException,IOException &#123;<br>        <span class="hljs-type">string</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter( <span class="hljs-string">&quot;name&quot;</span> ) ;<br>        system.out.println( <span class="hljs-string">&quot;servlet save name ==&gt; &quot;</span> + name);<br>        resp.setContentType( <span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">Printwriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> resp.getwriter();<br>        pw.write( <span class="hljs-string">&quot;&#123; &#x27; module &#x27; : &#x27; servlet save&#x27; &#125;&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req， HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SpringMVC</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span>&#123;<br>    <span class="hljs-meta">@RequestMapping( &quot;/save&quot;)</span><span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">( String name)</span>&#123;<br>        system.out.println( <span class="hljs-string">&quot;springmvc save name ==&gt; “ + name );</span><br><span class="hljs-string">        return &quot;</span>&#123;<span class="hljs-string">&#x27;module&#x27;</span>:<span class="hljs-string">&#x27;springmvc save&#x27;</span>&#125;<span class="hljs-string">&quot;;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h2><ol><li>SpringMVC入门案例</li></ol><ul><li>先导入SpringMVC坐标与Servlet坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet&lt;/ groupId&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建pringMVC控制器类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br>pubilc <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequetMap(&quot;/save&quot;)</span><br>    <span class="hljs-meta">@RequestBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;user save ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;info&#x27;:&#x27;Springmvc&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>初始化SpringMVC环境(同Spring环境)，设定SpringMVC加载对应的bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Componentscan(&quot;com.shine.controller&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理的请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainersInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-keyword">protected</span> webApplicationContext <span class="hljs-title function_">createServletApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AnnotationConfigwebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigwebApplicationContext</span>();<br>        ctx.register(SpringMvcConfig.class);<br>        <span class="hljs-keyword">return</span> ctx;<br>&#125;<br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createRootApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Controller加载控制与业务bean加载控制</li></ol><ul><li><p>SpringMVC相关bean(表现层bean)</p></li><li><p>Spring控制的bean</p><ul><li>业务bean (Service)</li><li>功能bean (DataSource等)</li></ul></li><li><p>因为功能不同，如何避免Spring错误的加载到SpringMVC的bean——<strong>加载spring控制的bean的时候排除掉springMVC控制的bean</strong></p></li><li><p>SpringMVC相关bean加载控制</p><ul><li>SpringMNC加载的bean对应的包均在com.shine.controller包内</li></ul></li><li><p>Spring相关bean加载控制</p><ul><li><p>方式一：Spring加载的bean设定扫描范围为com.itheima，排除掉controller包内的bean</p></li><li><p>方式二：Spring加载的bean设定扫描范围为精准范围，例如service包、dao包</p></li><li><p>方式三：不区分spring与SpringMVC的环境，加载到同一个环境中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式一</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.shine.service&quot;,&quot;com.shine.dao&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br><br><span class="hljs-comment">//方式二</span><br><span class="hljs-meta">@componentscan(value=&quot;com.shine&quot;,</span><br><span class="hljs-meta">    excludeFilters = @ComponentScan.Filter(</span><br><span class="hljs-meta">        type = FilterType.ANNOTATION,</span><br><span class="hljs-meta">        classes = Controller.class</span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>简化开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainersInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span>&#123;<br>    <span class="hljs-keyword">protected</span> class&lt;?&gt;[] getServletConfigclasses () &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> class&lt;?&gt;[] getRootConfigclasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、请求与响应"><a href="#二、请求与响应" class="headerlink" title="二、请求与响应"></a>二、请求与响应</h2><h3 id="（一）请求"><a href="#（一）请求" class="headerlink" title="（一）请求"></a>（一）请求</h3><ol><li>请求映射路径</li></ol><ul><li><p>名称：@RequestMapping</p></li><li><p>类型：<strong>方法注解  类注解</strong></p></li><li><p>位置： SpringMVC控制器方法定义上方</p></li><li><p>作用：设置当前控制器方法请求访问路径，如果设置在类上统一设置当前控制器方法请求访问路径前缀</p></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    RequestMapping (<span class="hljs-string">&quot;/save&quot;</span> )<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>    system.out.println( <span class="hljs-string">&quot;user save ... &quot;</span> );<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>请求参数</li></ol><ul><li><p>Get请求</p></li><li><p>Post请求</p></li><li><p>SpringMVC解决Post请求中文乱码问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SevletContainersInitConfig类</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>    <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>    filter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;filter&#125;;<br>&#125;<br><span class="hljs-comment">//注意：以上是针对POST请求</span><br></code></pre></td></tr></table></figure></li><li><p>五种类型参数传递</p><ul><li>普通参数：url地址传参，地址参数名与形参变量名相同，定义形参即可接收参数</li><li>POJO（实体类）参数：请求参数名与形参对象属性名相同，定义POJO类型形参即可接收参数</li><li>嵌套POJO参数：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数</li><li>数组参数：请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型形参即可接收参数</li><li>集合保存普通参数：请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam绑定参数关系</li></ul></li></ul><ol start="3"><li>json数据传递参数</li></ol><ul><li><p>step1：添加json数据转换相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.13.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>step2：设置发送json数据（请求body中添加json数据）</p></li><li><p>step3：开启自动转换json数据的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.shine.controller&quot;)</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：</strong>@EnablelwebNvc注解功能强大，该注解整合了多个功能，此处仅使用其中一部分功能，即json数据进行自动类型转换</p></li><li><p>step4：设置接收json数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping( &quot;/listParamForson&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">listParamForJson</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;string&gt; likes)</span>&#123;<br>    system.out.println(<span class="hljs-string">&quot;list common(json)参数传递list ==&gt; &quot;</span>+likes);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;list common for json param&#x27;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>@RequestBody和@RequestParam区别</p><ul><li>@RequestParam用于接收url地址传参，表单传参【application&#x2F;x-www-form-urlencoded】</li><li>@RequestBody用于接收json数据【application&#x2F;json】</li></ul></li><li><p>日期类型参数传递</p></li></ol><ul><li><p>日期类型数据基于系统不同格式也不尽相同</p><ul><li>2088-08-18</li><li>2088&#x2F;08&#x2F;18</li><li>08&#x2F;18&#x2F;2088</li></ul></li><li><p>接收形参时，根据不同的日期格式设置不同的接收方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping( &quot;/dataParam&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dataParam</span><span class="hljs-params">(Date date,</span><br><span class="hljs-params">        <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot; )</span> Date date1,</span><br><span class="hljs-params">        <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy/MM/dd HH: mm: ss&quot; )</span>Date date2)</span>&#123;<br>    System.out.print1n(<span class="hljs-string">&quot;参数传递date ==&gt; &quot;</span>+date);<br>    system.out.println(<span class="hljs-string">&quot;参数传递date(yyyy-MM-dd) ==&gt; &quot;</span>+date1);<br>    system.out.println(<span class="hljs-string">&quot;参数传递date(yyyy/MM/dd HH:mm:ss) ==&gt; &quot;</span>+date2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;data param&#x27;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>http://localhost/dataParam?date=2088/08/08&amp;date1=2088-08-18&amp;date2=2088/08/28 8:08:08</code></p></li></ul><h3 id="（二）响应"><a href="#（二）响应" class="headerlink" title="（二）响应"></a>（二）响应</h3><ol><li>@ResponseBody</li></ol><ul><li>位置：SpringMVC控制器方法定义上方置当前控制器返回值作为响应体</li><li>作用：设置当前控制器返回值作为响应体</li></ul><ol start="2"><li>HttpMessageConverter接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpMessageConverter</span>&lt;T&gt; &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRead</span><span class="hljs-params">(class&lt;?&gt; clazz，<span class="hljs-meta">@Nullable</span> MediaType mediaType)</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">canwrite</span><span class="hljs-params">(Class&lt;?&gt; clazz，<span class="hljs-meta">@Nullable</span> MediaType mediaType)</span>;<br>    List&lt;MediaType&gt; <span class="hljs-title function_">getSupportedMediaTypes</span><span class="hljs-params">()</span>;<br>    T <span class="hljs-title function_">read</span><span class="hljs-params">(class&lt;? extends T&gt; clazz，HttpInputMessage inputMessage)</span> <br>        <span class="hljs-keyword">throws</span> IOException，HttpMessageNotReadableException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(T t，<span class="hljs-meta">@Nullable</span> MediaType contentType，HttpOutputMessage outputMessage)</span> <span class="hljs-keyword">throws</span> IOException，HttpMessageNotwritableException;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、REST风格"><a href="#三、REST风格" class="headerlink" title="三、REST风格"></a>三、REST风格</h2><ol><li>REST风格简介</li></ol><ul><li><p>REST（Representation State Transfer）,表现形式状态转换</p><ul><li><p>传统风格资源描述形式</p><p><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a></p><p><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a></p></li><li><p>REST风格描述形式</p><p><a href="http://localhost/user/1">http://localhost/user/1</a></p><p><a href="http://localhost/user">http://localhost/user</a></p></li></ul></li><li><p>优点:</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul></li><li><p>按照REST风格访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作</p><ul><li>http: &#x2F; &#x2F; localhost&#x2F;users查询全部用户信息GET(查询)</li><li>http:&#x2F; &#x2F;localhost&#x2F;users&#x2F;1查询指定用户信息GET(查询)</li><li>http: &#x2F; &#x2F; localhost&#x2F;users添加用户信息POST(新增保存)</li><li>http: &#x2F; &#x2F;localhost&#x2F;users修改用户信息PUT(修改&#x2F;更新)</li><li>http:&#x2F; &#x2F;localhost&#x2F;users&#x2F;1删除用户信息DELETE (删除)</li></ul><p><strong>注：</strong>上述行为是约定方式，约定不是规范，可以打破，所以称<strong>REST风格</strong>，而不是REST规范<br>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源，例如: users、books、account….</p></li><li><p>根据REST风格对资源进行访问称为RESTful</p></li></ul><ol start="2"><li>案例</li></ol><ul><li><p>设定http请求动作（动词)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/users&quot;, method = RequestMethod.POST)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    system.out.println( <span class="hljs-string">&quot;user save.. .&quot;</span> + user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;<br>&#125;<br><span class="hljs-meta">@RequestMapping(value = &quot;/users&quot; ,method = RequestMethod.PUT)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> string <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    system.out.println( <span class="hljs-string">&quot;user update...&quot;</span>+user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &#x27;module&#x27;:&#x27;user update&#x27;&#125;&quot;</span> ;<br></code></pre></td></tr></table></figure></li><li><p>设定请求参数(路径变量)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method=RequestMethod.DELETE)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> string <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>    system.out.println(<span class="hljs-string">&quot;user delete...&quot;</span> +id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span> ;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>@RequestBody  @RequestParam  @PathVariable</li></ol><ul><li>区别<ul><li>@RequestParam用于接收url地址传参或表单传参</li><li>@RequestBody用于接收json数据</li><li>@PathVariable用于接收路径参数，使用{参数名称}描述路径参数</li></ul></li><li>应用<ul><li>后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody应用较广</li><li>如果发送非json格式数据，选用@RequestParam接收请求参数</li><li>采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</li></ul></li></ul><ol start="4"><li>设置对静态资源发访问放行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">webMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//当访问/pages/????时候，走/pages目录下的内容</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/pages/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/js/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/css/**&quot;</span>).addResourceLocations( <span class="hljs-string">&quot;/css/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/plugins/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、SSM整合"><a href="#四、SSM整合" class="headerlink" title="四、SSM整合"></a>四、SSM整合</h2><img src="/2023/10/29/java/SpingMVC/image-20220616191858238.png" class title="image-20220616191858238"><ol><li>异常处理器</li></ol><ul><li>集中的、统一的处理项目中出现的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectExceptionAdvice</span> &#123;<br>    ExceptionHandler(Exception.class)<br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doException</span><span class="hljs-params">(Exception ex)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">666</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>项目异常分类<ul><li>业务异常(BusinessException)<ul><li>规范的用户行为产生的异常</li><li>不规范的用户行为操作产生的异常</li></ul></li><li>系统异常(SystemException)<ul><li>项目运行过程中可预计且无法避免的异常</li></ul></li><li>其他异常(Exception)<ul><li>编程人员未预期到的异常</li></ul></li></ul></li><li>项目异常处理方案<ul><li>业务异常(BusinessException)<ul><li>发送对应消息传递给用户，提醒规范操作</li></ul></li><li>系统异常(SystemException)<ul><li>发送固定消息传递给用户，安抚用户</li><li>发送特定消息给运维人员，提醒维护</li><li>记录日志</li></ul></li><li>其他异常(Exception)<ul><li>发送固定消息传递给用户，安抚用户</li><li>发送特定消息给编程人员，提醒维护(纳入预期范围内)</li><li>记录日志</li></ul></li></ul></li></ul><h2 id="五、拦截器"><a href="#五、拦截器" class="headerlink" title="五、拦截器"></a>五、拦截器</h2><img src="/2023/10/29/java/SpingMVC/image-20220618184304046.png" class title="image-20220618184304046"><ol><li>拦截器概念</li></ol><ul><li>拦截器( Interceptor)是一种动态拦截方法调用的机制</li><li>作用︰<ul><li>在指定的方法调用前后执行预先设定后的的代码阻止原始方法的执行</li></ul></li></ul><ol start="2"><li>拦截器与过滤器区别</li></ol><ul><li>归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术</li><li>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强</li></ul><ol start="3"><li>案例</li></ol><ul><li><p>声明拦截器的bean，并实现HandlerInterceptor接口（注意:扫描加载bean)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">( ..)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    System.out.println( <span class="hljs-string">&quot;preHandle. . . &quot;</span> );<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">( ..)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    system.out.println( <span class="hljs-string">&quot;postHandle. . .&quot;</span> );<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">( ..)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    system.out.println( <span class="hljs-string">&quot;afterCompletion. . .&quot;</span> );<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义配置类，继承WebMvcConfigurationSupport，实现addInterceptor方法(注意:扫描加载配置)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcSsupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">webMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加拦截器并设定拦截的访问路径，路径可以通过可变参数设置多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">webMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProjectInterceptor projectInterceptor;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span> <span class="hljs-params">(InterceptorRegistry registry)</span>&#123;<br>        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="hljs-string">&quot;/books&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>执行流程</p></li></ul><img src="/2023/10/29/java/SpingMVC/image-20220618190940242.png" class title="image-20220618190940242">]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2023/10/29/java/Spring/"/>
    <url>/2023/10/29/java/Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="一、Spring-Framework系统架构"><a href="#一、Spring-Framework系统架构" class="headerlink" title="一、Spring Framework系统架构"></a>一、Spring Framework系统架构</h2><ul><li>Spring 4.x架构图</li></ul><img src="/2023/10/29/java/Spring/image-20220605170451576.png" class title="image-20220605170451576"><p>​IoC（Inversion of Control）控制反转 和 DI（Dependency Injection）</p><ul><li>代码书写现状——耦合度高</li><li>解决方案：使用对象时，程序中不要主动使用new产生对象，转换为由外部提供对象</li><li>IoC：对象的创建控制权由程序转移到<strong>外部</strong>，这种思想称为控制反转</li><li>Spring技术对IoC思想进行了实现<ul><li>提供了一个容器，称为IoC容器，充当“外部”</li><li>IoC容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在IoC容器中统称为Bean</li></ul></li><li>DI—依赖注入<ul><li>在容器中建立bean和bean之前的依赖关系的整个过程，称为依赖注入</li></ul></li><li>目标：充分解耦<ul><li>使用IoC容器管理bean (IoC)</li><li>在IoC容器内将有依赖关系的bean进行关系绑定（DI)</li></ul></li><li>最终效果<ul><li>使用对象时不仅可以直接从IoC容器中获取，并且获取到的bean已经绑定了所有的依赖关系</li></ul></li></ul><p>（1）IoC案例</p><ul><li><p>导入Spring坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>定义Spring管理的类（接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        bookDao.save();;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建Spring配置文件，配置对应类作为Spring管理的bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans </span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shine.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shine.service.impl.BookServiceImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>初始化IoC容器( Spring核心容器&#x2F;Spring容器），通过容器获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//加载配置文件得到上下文对象，也就是容器对象</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">//获取资源</span><br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookService&quot;</span>);<br>        bookService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>（2）DI案例</p><ul><li><p>删除使用new形式创建对象的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        bookDao.save();;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供依赖对象对应的setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>        bookDao.save();;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDao</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置service与dao之间的关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shine.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shine.service.impl.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--7.配置server与dao的关系--&gt;</span><br>        <span class="hljs-comment">&lt;!--property标签表示配置当前bean的属性name属性表示配置哪一个具体的属性</span><br><span class="hljs-comment">        ref属性表示参照哪一个bean--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="二、容器"><a href="#二、容器" class="headerlink" title="二、容器"></a>二、容器</h2><ol><li>bean基础配置</li></ol><ul><li>别名配置：<code>name=&quot; &quot; </code> 可定义多个（可以逗号分号空格分隔）</li><li>控制由同一个bean创建的实例的数量：<code>scope=&quot; &quot;</code><ul><li>singletpn：单例（默认)</li><li>prototype：非单例</li></ul></li></ul><ol start="2"><li>bean实例化</li></ol><ul><li><p>构造方法实例化bean</p></li><li><p>使用静态工厂实例化bean</p></li><li><p>实例工厂实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">getUserDao</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoFactory&quot;</span><span class="hljs-attr">-class</span>=<span class="hljs-string">&quot;com.itheima.factory.UserDaoFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;userDaoFactory&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>FactoryBean（实例工厂的演进，较为实用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;UserDao&gt; &#123;<br>    <span class="hljs-keyword">public</span> UserDao <span class="hljs-title function_">get0bject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>( );<br>&#125;<br>    <span class="hljs-keyword">public</span> class&lt;? &gt;getobjectType() &#123;<br>        <span class="hljs-keyword">return</span> UserDao.class;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shine.factory.UserDaoFactoryBean&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>bean的生命周期控制的两种方法</li></ol><ul><li><p>提供生命周期控制方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        system.out.println( <span class="hljs-string">&quot;book dao save ...&quot;</span> );<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println( <span class="hljs-string">&quot;book init ...&quot;</span> );<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destory</span><span class="hljs-params">()</span>&#123;<br>        System.out.print1n( <span class="hljs-string">&quot;book destory ...&quot;</span> );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置生命周期控制方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.itheima.dao.impl. BookDaoImpl&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>= <span class="hljs-string">&quot;destory&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>方法二：使用接口</p><ul><li>实现InitializingBean，DisposableBean接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span>,InitializingBean ,DisposableBean &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> i<br>        system.out.println( <span class="hljs-string">&quot;book service save ... &quot;</span> );<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println( <span class="hljs-string">&quot;afterPropertiesSet&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println( <span class="hljs-string">&quot;destroy&quot;</span> );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li>bean的生命周期</li></ol><ul><li><p>初始化容器</p><ul><li>创建对象</li><li>执行构造方法</li><li>执行属性注入</li><li>致性bean初始化方法</li></ul></li><li><p>使用bean——执行业务操作</p></li><li><p>关闭&#x2F;销毁容器——执行销毁方法</p></li></ul><ol start="5"><li>依赖注入</li></ol><p>（1）向类中传递数据的方法</p><ul><li>普通方法（set方法）</li><li>构造方法</li></ul><p>（2）依赖注入方式</p><ul><li>setter注入：简单类型、引用类型</li><li>构造器注入：简单类型、引用类型</li></ul><p><strong>注</strong>：简单类型的setter注入与引用有所不同，property标签使用value属性，<code>&lt;bean&gt;&lt;property name=&quot;&quot; value=&quot;...&quot;&gt;&lt;/bean&gt;</code>，引用是<code>ref=&quot;...&quot;</code></p><p>（3）构造器注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shine.service.impl.BookServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注</strong>：name属性值为构造器方法中的形参名称</p><ol start="6"><li>依赖自动装配</li></ol><ul><li>IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</li><li>自动装配方式<ul><li>按类型（常用）</li><li>按名称</li><li>按构造方法</li><li>不启用自动装配</li></ul></li></ul><p>（1）按类型</p><p>​保留setter方法，不再需要property具体写属性，关键是<strong>autowire</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.shine.service.impl.BookServiceImpl&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="7"><li>集合注入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;array&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>cdh<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>cdh<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;country&quot;</span>&gt;</span>china<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="8"><li>数据源对象管理</li></ol><p>（1）管理第三方库</p><ul><li><p>首先pom.xml加入相关的依赖</p></li><li><p>applicationContext.xml创建相应的bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--管理DruidDataSource对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverclassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="9"><li>加载properties文件</li></ol><ul><li><p><beans>中开一个全新的命名空间context</beans></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1.开启context命名空间--&gt;</span><br><span class="hljs-comment">&lt;!--2.使用context空间加载properties文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>  <br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placehoder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--管理DruidDataSource对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverclassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.dirver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.root&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>加载多个properties文件可在location后使用逗号隔开，或者使用星号匹配即<code>location=&quot;classpath:*.properties&quot;</code></p></li><li><p>从外部jar包中读properties文件，可在classpath后加个星号<code>location=&quot;classpath*:*.properties&quot;</code></p></li><li><p>不加载系统属性，<code>&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;</code></p></li></ul><ol start="10"><li>容器类层次结构图</li></ol><img src="/2023/10/29/java/Spring/image-20220606205033297.png" class title="image-20220606205033297"><ol start="11"><li>小结</li></ol><ul><li><p>bean相关</p><img src="/2023/10/29/java/Spring/image-20220606205346998.png" class title="image-20220606205346998"></li><li><p>依赖注入相关</p><img src="/2023/10/29/java/Spring/image-20220606205452381.png" class title="image-20220606205452381"></li></ul><h2 id="三、注解开发"><a href="#三、注解开发" class="headerlink" title="三、注解开发"></a>三、注解开发</h2><ol><li>注解开发定义bean</li></ol><ul><li><p>使用@Component定义bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>核心配置文件中通过组件扫描加载bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.shine.dao.impl&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></li><li><p>Spring提供@Component注解的三个衍生注解</p><ul><li><p>@controller：用于表现层bean定义</p></li><li><p>@service ：用于业务层bean定义</p></li><li><p>@Repository :用于数据层bean定义</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository( &quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>纯注解开发</li></ol><ul><li>Spring3.0开启了纯注解开发模式，使用Java类替代配置文件，开启了Spring快速开发赛道</li><li>Java类代替Spring核心配置文件，</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.shine&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br>//使用java类替代配置文件<br>@@Configuration<br>@ComponentScan(&quot;com.shine&quot;)<br>public class SpringConfig &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>@Configuration注解用于设定当前类为配置类</p></li><li><p>@ComponentScan注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式</p><p><code>@ComponentScan(&#123;com.shine.service&quot;, &quot;com.shine.dao&quot;&#125;)</code></p></li><li><p>加载配置类初始化容器</p><p><code>ApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class);</code></p></li></ul><ol start="3"><li>bean的管理</li></ol><ul><li><p>使用@Scope定义bean作用范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@scope(&quot;singleton&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用@PostConstruct、@PreDestroy定义bean生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@scope(&quot;singleton&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> i<br>    system.out.println( <span class="hljs-string">&quot;book dao constructor ...&quot;</span> );<br>&#125;<br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    system.out.println( <span class="hljs-string">&quot;book init ...&quot;</span> );<br>&#125;<br><span class="hljs-meta">@PreDestroy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br>    system.out.println( <span class="hljs-string">&quot;book destory ... &quot;</span> );<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li>依赖注入</li></ol><ul><li><p>使用@Autowired注解开启自动装配模式（按类型)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        system.out.println( <span class="hljs-string">&quot;book service save ... &quot;</span> );bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意∶自动装配基于反射设计创建对象并<strong>暴力反射对应属性为私有属性初始化数据</strong>，因此无需提供setter方法注意∶自动装配建议使用无参构造方法创建对象（默认），如果不提供对应构造方法，请提供唯一的构造方法</p></li><li><p>使用@value实现简单类型的注入</p></li><li><p>使用@PropertySource注解加载properties文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.shine&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意∶路径仅支持单一文件配置，多文件请使用数组格式配置，不允许使用通配符*</p></li></ul><ol start="5"><li>第三方bean管理</li></ol><ul><li>使用@Bean配置第三方bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>    <span class="hljs-comment">//1.定义一个方法获得要管理的对象</span><br>    <span class="hljs-comment">//2.添加@Bean，表示当前方法的返回值是一个bean@Bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>i<br>    <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用独立的配置管理第三方bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>( );<br>        ds.setDriverclassName( <span class="hljs-string">&quot;com.mysq1.jdbc.Driver&quot;</span>);<br>        ds.setUr1( <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);<br>        ds.setUsername( <span class="hljs-string">&quot;root&quot;</span> );<br>        ds.setPassword( <span class="hljs-string">&quot;root&quot;</span> );<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​然后将独立的配置导入核心配置，使用@import注解手动加入配置类到核心配置，此注解只能添加一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(JdbcConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>小结</li></ol><img src="/2023/10/29/java/Spring/image-20220607202125846.png" class title="image-20220607202125846"><h2 id="四、AOP面向切面编程"><a href="#四、AOP面向切面编程" class="headerlink" title="四、AOP面向切面编程"></a>四、AOP面向切面编程</h2><ul><li>AOP（Aspect Oriented Programming），一种编程范式</li><li>作用：在不惊动原始设计的基础上进行功能增强</li><li>Spring理念：无入侵时&#x2F;无侵入式</li></ul><img src="/2023/10/29/java/Spring/image-20220608193634415.png" class title="image-20220608193634415"><ul><li>连接点( oinPoint )：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等<ul><li>在springAOP中，理解为方法的执行</li></ul></li><li>切入点( Pointcut )：匹配连接点的式子<ul><li>在SpringAOP中，一个切入点可以只描述一个具体方法，也可以匹配多个方法<ul><li>一个具体方法：com.shine.dao包下的BookDao接口中的无形参无返回值的save方法</li><li>匹配多个方法：所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li></ul></li></ul></li><li>通知( Advice )：在切入点处执行的操作，也就是共性功能<ul><li>在SpringAOP中，功能最终以方法的形式呈现</li></ul></li><li>通知类：定义通知的类</li><li>切面(Aspect )：描述通知与切入点的对应关系</li></ul><ol><li>AOP案例</li></ol><p>（1）导入aop相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>说明：spring-context坐标依赖spring-aop坐标</p><img src="/2023/10/29/java/Spring/image-20220608211758082.png" class title="image-20220608211758082"><p>（2）定义dao接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System. out.println(System.currentTimeMillis());<br>        system.out.println(<span class="hljs-string">&quot;book dao save ...&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book dao update ...&quot;</span> );<br>    &#125;<br></code></pre></td></tr></table></figure><p>（3）定义通知类，制作通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        system.out.println(System.currentTimeMillis());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（4）<strong>定义切入点</strong>（关键）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br><span class="hljs-meta">@Pointcut( &quot;execution(void com.shine.dao.BookDao.update())&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：切入点定义依托一个不具有实际意义的方法进行，即无参数，无返回值，方法体无实际逻辑</p><p>（5）绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行<strong>位置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution( void com.itheima.dao.BookDao.update())&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        system.out.println(System.currentTimeMillis());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（6）定义通知类受Spring容器管理，并定义当前类为切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;...&#125;<br></code></pre></td></tr></table></figure><p>（7）开启Spring对AOP注解驱动支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.shine&quot;)</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>AOP工作流程</li></ol><ul><li>Spring容器启动</li><li>读取所有切面配置的切入点</li><li>初始化bean，判定bean对应的类中的方法是否匹配到任意切入点<ul><li>匹配失败，创建对象</li><li>匹配成功，创建原始对象（目标对象）的代理对象</li></ul></li><li>获取bean执行方法<ul><li>获取bean，调用方法并执行，完成操作</li><li>获取的bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li></ul></li></ul><p>（1）AOP核心概念</p><ul><li>目标对象(Target ）：原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li><li>代理（ Proxy )︰目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</li></ul><ol start="3"><li>AOP切入点表达式</li></ol><ul><li><p>切入点表达式标准格式：动作关键字（访问修饰符 返回值 包名.类&#x2F;接口.方法名（参数）异常名）</p><ul><li><p>动作关键字︰描述切入点的行为动作，例如execution表示执行到指定切入点</p></li><li><p>访问修饰符: public , private等，可以省略</p></li><li><p>返回值</p></li><li><p>包名</p></li><li><p>类&#x2F;接口名方法名参数</p></li><li><p>异常名︰方法定义中抛出指定异常，可以省略</p></li></ul></li><li><p>可以使用通配符描述切入点，快速描述</p><ul><li><p>*︰单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现<br><code>execution (public * com.shine.*.UserService.find*(*) )</code></p><p>匹配com.shine包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p></li><li><p>.. ：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写<br><code>execution (public User com..UserService.findById (..) )</code></p><p>匹配com包下的任意包中的UserService类或接口中所有名称为findByld的方法</p></li><li><p>+：专用于匹配子类类型<br><code>execution(* *..*Service+.*(..))</code></p></li></ul></li></ul><ol start="4"><li>AOP通知类型</li></ol><ul><li><p>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置</p></li><li><p>AOP通知共分为5种类型</p><ol><li><p>前置通知 <code>@Before(..)</code></p></li><li><p>后置通知 <code>@After(..)</code></p></li><li><p>环绕通知（重点)</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    system.out.println( <span class="hljs-string">&quot;around before advice ...&quot;</span>) ;<br>    <span class="hljs-comment">//表示对原始操作的调用</span><br>    pjp.proceed();<br>    system.out.print1n( <span class="hljs-string">&quot;around after advice ...&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//如果原始方法有返回值</span><br><span class="hljs-meta">@Around(&quot;pt2()&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundSelect</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    system.out.println( <span class="hljs-string">&quot;around before advice ...&quot;</span>) ;<br>    <span class="hljs-comment">//表示对原始操作的调用</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>    system.out.print1n( <span class="hljs-string">&quot;around after advice ...&quot;</span>);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>  <strong>注意：</strong></p><ul><li><p>环绕通知必须依赖形参ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</p></li><li><p>通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行</p></li><li><p>对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，必须设定为Object类型</p></li><li><p>原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void，也可以设置成Object</p></li><li><p>由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须抛出Throwable对象</p></li></ul><ol start="4"><li><p>返回后通知（了解）</p></li><li><p>抛出异常后通知（了解)</p></li></ol></li></ul><ol start="5"><li>AOP通知获取数据</li></ol><p>（1）获取切入点方法的参数</p><ul><li><p>JoinPoint：适用于前置、后置、返回后、抛出异常后通知</p></li><li><p>ProceedJointPoint：适用于环绕通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(]oinPoint jp)</span> &#123;<br>    object[] args = jp.getArgs();<br>    System.out.println(Arrays.tostring(args));<br>    <br><span class="hljs-comment">//ProceedJointPoint是JoinPoint的子类</span><br><span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    object[] args = pjp.getArgs();<br>    system.out.println(Arrays.tostring(args));<br>    <span class="hljs-type">object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>（2）获取切入点方法返回值</p><ul><li><p>返回后通知</p></li><li><p>抛出异常后通知可以获取切入点方法中出现的异常信息，使用形参可以接收对应的异常对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning( value = &quot;pt()&quot; ,returning = &quot;ret&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(string ret)</span> &#123;<br>  system.out.println( <span class="hljs-string">&quot;afterReturning advice ... &quot;</span>+ret);<br><br><span class="hljs-comment">//环绕通知中可以手工书写对原始方法的调用，得到的结果即为原始方法的返回值</span><br><span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> object <span class="hljs-title function_">around</span><span class="hljs-params">( ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-type">object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>（3）环绕通知获取切入点方法运行异常信息（了解）</p><ul><li><p>抛出异常后通知</p></li><li><p>环绕通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抛出异常后通知可以获取切入点方法中出现的异常信息，使用形参可以接收对应的异常对象</span><br><span class="hljs-meta">@AfterThrowing(value = &quot;pt()&quot; ,throwing = &quot;t&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span> <span class="hljs-params">(Throwable t)</span> &#123;<br>    System.out.println( <span class="hljs-string">&quot;afterThrowing advice ... &quot;</span>+ t);<br>&#125;<br><br><span class="hljs-comment">//抛出异常后通知可以获取切入点方法运行的异常信息，使用形参可以接收运行时抛出的异常对象</span><br><span class="hljs-meta">@Around( &quot;pt()&quot;)</span><br><span class="hljs-keyword">public</span> object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span>&#123;<br>    <span class="hljs-type">object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ret = pjp.proceed( );<br>    &#125; <span class="hljs-keyword">catch</span> ( Throwable t) &#123;<br>        t.printstackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="五、Spring事务"><a href="#五、Spring事务" class="headerlink" title="五、Spring事务"></a>五、Spring事务</h2><ol><li>Spring事务简介</li></ol><ul><li>事务作用：在数据层保障一系列的数据库操作同成功同失败</li><li>spring事务作用：在数据层或<strong>业务层</strong>保障一系列的数据操作同成功同失败</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PlatformTransactionManager</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">(Transactionstatus status)</span> <span class="hljs-keyword">throws</span> TransactionException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">( TransactionStatus status)</span> <span class="hljs-keyword">throws</span> TransactionException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceTransactionManager</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>案例：银行账户转账</li></ol><p>（1）在业务层接口上添加Spring事务管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountService</span> &#123;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out,string in ,Double money)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：</strong>Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中，降低耦合<br>注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口上表示当前接口所有方法开启事务</p><p>（2）设置事务管理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> PlatformTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>    <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">ptm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>    ptm. setDataSource(dataSource);<br>    <span class="hljs-keyword">return</span> ptm;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）开启注解式事务驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.shine&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Spring事务角色</li></ol><ul><li>事务角色<ul><li>事务管理员︰发起事务方，在Spring中通常指代业务层开启事务的方法</li><li>事务协调员︰加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li></ul></li></ul><ol start="4"><li>事务传播行为</li></ol><ul><li>事务传播行为：事务协调员对事务管理员所携带事务的处理态度</li></ul><img src="/2023/10/29/java/Spring/image-20220609193516135.png" class title="image-20220609193516135"><ul><li><p>案例：转账业务追加日志（无论转账是否成功，都应记录日志）</p><ul><li><p>在业务层接口上添加Spring事务，设置事务传播行为REQUIRES_NEW（需要新事务）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LogService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LogDao logDao;<br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(string out,string in,Double money )</span> &#123;<br>        logDao.log(<span class="hljs-string">&quot;转账操作由&quot;</span>+out+<span class="hljs-string">&quot;到&quot;</span>+in+<span class="hljs-string">&quot;,金额:&quot;</span>+money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><img src="/2023/10/29/java/Spring/image-20220609194152790.png" class title="image-20220609194152790">]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/29/hello-world/"/>
    <url>/2023/10/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
